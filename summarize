#!/usr/bin/env bash
# This script was generated by bashly 1.0.0 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
summarize_usage() {
  if [[ -n $long_usage ]]; then
    printf "summarize - A tool to deploy models to AWS Sagemaker and query its associated endpoints for inference. Place desired input in corpus.txt. Result will be stored in output_file.txt.\n"
    echo

  else
    printf "summarize - A tool to deploy models to AWS Sagemaker and query its associated endpoints for inference. Place desired input in corpus.txt. Result will be stored in output_file.txt.\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  summarize COMMAND\n"
  printf "  summarize [COMMAND] --help | -h\n"
  printf "  summarize --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Deploy summarization model to AWS Sagemaker from Hugging Face. Tool uses pegasus-xsum (huggingface.co/google/pegasus-xsum) by default\n" "deploy "
  printf "  %s   Send query from input given in corpus.txt file to model's endpoint and return result in output_file.txt\n" "query  "
  printf "  %s   Remove all running resources from AWS Sagemaker. Delete endpoint, endpoint configuration, and model\n" "remove "
  printf "  %s   Regenerate configuration files in case tool stops working\n" "restore"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
summarize_deploy_usage() {
  if [[ -n $long_usage ]]; then
    printf "summarize deploy - Deploy summarization model to AWS Sagemaker from Hugging Face. Tool uses pegasus-xsum (huggingface.co/google/pegasus-xsum) by default\n"
    echo

  else
    printf "summarize deploy - Deploy summarization model to AWS Sagemaker from Hugging Face. Tool uses pegasus-xsum (huggingface.co/google/pegasus-xsum) by default\n"
    echo

  fi

  printf "Alias: d\n"
  echo

  printf "%s\n" "Usage:"
  printf "  summarize deploy [SHOW-ENDPOINT] [SHOW-MODEL]\n"
  printf "  summarize deploy --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "SHOW-ENDPOINT"
    printf "    List names of endpoint & endpoint configurations hosted on Sagemaker after\n    deployment\n"
    echo

    # :argument.usage
    printf "  %s\n" "SHOW-MODEL"
    printf "    List name of model hosted on Sagemaker after deployment\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  ./summarize d\n"
    printf "  ./summarize deploy\n"
    printf "  ./summarize d show_endpoint show_model\n"
    echo

  fi
}

# :command.usage
summarize_query_usage() {
  if [[ -n $long_usage ]]; then
    printf "summarize query - Send query from input given in corpus.txt file to model's endpoint and return result in output_file.txt\n"
    echo

  else
    printf "summarize query - Send query from input given in corpus.txt file to model's endpoint and return result in output_file.txt\n"
    echo

  fi

  printf "Alias: q\n"
  echo

  printf "%s\n" "Usage:"
  printf "  summarize query\n"
  printf "  summarize query --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  ./summarize q\n"
    printf "  ./summarize query\n"
    echo

  fi
}

# :command.usage
summarize_remove_usage() {
  if [[ -n $long_usage ]]; then
    printf "summarize remove - Remove all running resources from AWS Sagemaker. Delete endpoint, endpoint configuration, and model\n"
    echo

  else
    printf "summarize remove - Remove all running resources from AWS Sagemaker. Delete endpoint, endpoint configuration, and model\n"
    echo

  fi

  printf "Alias: rem\n"
  echo

  printf "%s\n" "Usage:"
  printf "  summarize remove\n"
  printf "  summarize remove --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  ./summarize rem\n"
    printf "  ./summarize remove\n"
    echo

  fi
}

# :command.usage
summarize_restore_usage() {
  if [[ -n $long_usage ]]; then
    printf "summarize restore - Regenerate configuration files in case tool stops working\n"
    echo

  else
    printf "summarize restore - Regenerate configuration files in case tool stops working\n"
    echo

  fi

  printf "Alias: res\n"
  echo

  printf "%s\n" "Usage:"
  printf "  summarize restore\n"
  printf "  summarize restore --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  ./summarize restore\n"
    printf "  ./summarize res\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if ((${#args[@]})); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions
# :command.function
summarize_deploy_command() {
  # src/deploy_command.sh
  # check if model is active
  # if model is active, then don't deploy
  if [[ $(aws sagemaker list-models | jq ".Models[0].ModelName") != null ]]; then
      echo "model is already active. run 'query' command to invoke endpoint or 'remove' to remove model & endpoint."
      exit 1
  fi

  # do the same for endpoint
  if [[ $(aws sagemaker list-endpoints | jq ".Endpoints[0].EndpointName") != null ]]; then
      echo "endpoint is already active. run 'query' command to invoke endpoint or 'remove' to remove model & endpoint."
      exit 1
  fi

  # deploy
  python bash_cli/deploy.py
  echo "model deployed. run tool with 'query' command to invoke endpoint"

  # source check_active script to make sure we have endpoint & model names in environment
  source bash_cli/utils/check_active.sh

  # check if user wants to see endpoint or model names
  inspect_args
  endpt_check=${args[show-endpoint]}
  model_check=${args[show-model]}

  if [[ "$endpt_check" ]]; then
      echo "endpoint: $endpt"
      echo "endpoint config: $endptconfig"
  fi

  if [[ "$model_check" ]]; then
      echo "model: $model"
  fi

}

# :command.function
summarize_query_command() {
  # src/query_command.sh
  # check if corpus is too long
  if [[ $(wc -w corpus.txt | cut -d' ' -f1) -gt 1024 ]]; then
      echo "corpus is too long. please shorten to 1025 words or less"
      echo "current corpus length: $(wc -w corpus.txt | cut -d' ' -f1)"
      exit 1
  fi

  # source check_active to ensure we have endpoint & model names in environment
  source ./bash_cli/utils/check_active.sh

  # pull endpoint name & clean for invoke command
  endpt_temp=$(echo $endpt | tr -d '"') # remove quotes for sagemaker invocation

  # run to_json to clean up user input
  python bash_cli/to_json.py

  echo "invoking endpoint..."
  aws sagemaker-runtime invoke-endpoint \
      --endpoint-name $endpt_temp \
      --body file://bash_cli/corpus.json \
      --content-type application/json output_file.txt

  echo -e "finished, results in output_file.txt\n"
  echo "result: "
  ./bash_cli/utils/print_output.sh

  echo -e "\nremember to run './summarize remove' to avoid being charged for unused resources"
  echo "replace text in corpus.txt to run a new query"

  #inspect_args # add back if you want to add args or flags

}

# :command.function
summarize_remove_command() {
  # src/remove_command.sh
  ./bash_cli/utils/delete_resources.sh

  #inspect_args # add back if you want to add args or flags

}

# :command.function
summarize_restore_command() {
  # src/restore_command.sh
  source ./bash_cli/utils/check_active.sh
  echo "local files regenerated"
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        summarize_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    deploy | d)
      action="deploy"
      shift
      summarize_deploy_parse_requirements "$@"
      shift $#
      ;;

    query | q)
      action="query"
      shift
      summarize_query_parse_requirements "$@"
      shift $#
      ;;

    remove | rem)
      action="remove"
      shift
      summarize_remove_parse_requirements "$@"
      shift $#
      ;;

    restore | res)
      action="restore"
      shift
      summarize_restore_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      summarize_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
summarize_deploy_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        summarize_deploy_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="deploy"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['show-endpoint']+x} ]]; then

          args['show-endpoint']=$1
          shift
        elif [[ -z ${args['show-model']+x} ]]; then

          args['show-model']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
summarize_query_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        summarize_query_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="query"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
summarize_remove_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        summarize_remove_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="remove"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
summarize_restore_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        summarize_restore_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="restore"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "deploy")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        summarize_deploy_usage
      else
        summarize_deploy_command
      fi
      ;;

    "query")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        summarize_query_usage
      else
        summarize_query_command
      fi
      ;;

    "remove")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        summarize_remove_usage
      else
        summarize_remove_command
      fi
      ;;

    "restore")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        summarize_restore_usage
      else
        summarize_restore_command
      fi
      ;;

  esac
}

initialize
run "$@"
